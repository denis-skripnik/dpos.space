<?php
$text ="Здравствуйте. Через некоторое время после написания [предыдущего поста](https://golos.id/goldvoice/@denis-skripnik/eos-ili-ne-eos-chastx-4-izmeneniya-golosa-posle-forka-eos) я понял, что забыл кое о чём рассказать. Записав мысли, сохранил их. Сегодня представляю вам.\n\n## 1. Бесплатные и быстрые транзакции:\nПлюсом Голоса и Steem является то, что транзакции здесь быстры и не имеют комиссий - согласен с @lindsay в этом плане.\nСчитаю, что необходимо сохранить это преимущество после перехода на EOS форк.\nНо транзакции бывают разными. Разделим их следующим образом:\n1. С минимальной нагрузкой на сеть (переводы между пользователями, апвоты, репосты, обновление информации о приложении в EOS форке, воркеры, принятие решений об обновлении DApp или сети, делегирование/отмена СГ, понижение СГ и т.п.);\n2. Со средней нагрузкой (Публикация объекта (Сейчас это посты), добавление комментария к объекту, custom_json, Custom_binery, репост с комментарием и т.п.);\n3. С высокой нагрузкой: Транзакции, содержащии смартконтракты, транзакции произвольные, создаваемые смартконтрактами, и не относящиеся ни к одному из перечисленных выше типов, SEND_IPFS транзакции, так как они требуют взаимодействия с IPFS и т.п.\n\nТранзакции, содержащие операции первого типа должны быть бесплатными; Второго - иметь комиссию; Третьего - ещё большую комиссию, платёж за размер транзакции или использование части ресурсов сети в соответствии с имеющемся аналогом СГ.\n\nПри этом платежи должны быть самыми быстро выполняемыми. На втором месте - апвоты и репосты без комментариев, на третьем - Воркеры и обновление приложений в сети, принятие решений об изменениях в DApp или сети, на четвёртом что-то ещё... И так далее.\n\n## 2. Воркеры:\nО них @goloscore тоже писали.\nДолжен быть инструмент, вознаграждающий разработчиков за выполняемую работу. Это повысит мотивацию разрабатывать что либо для сети или DApps.\n### Типы запросов:\n1. Предзапрос на выполнение работы. В этом случае разработчики со своего аккаунта публикуют заявку, где есть заголовок проекта, его описание, github, где будет идти разработка, заказчики (Те, кто придумал идею), список инвесторов и статус взаимодействия с ними, запрашиваемая цена и срок разработки. Также можно сделать поле со списком кошельков, которые получат средства, с указанием цен у каждого.\nТе, кто согласны, отмечают этот проект. Если большинство делегатов/избранных пользователей для Воркеров выбирают проект, разработчики получают токены из фонда, но ...\nОни блокируются смартконтрактом. Только после окончания разработки будет разморозка. При этом на момент окончания подбираются случайным образом гаранты и, если делегаты не хотят отдавать токены, хотя проект создан, оспаривают это решение, после чего средства переводятся на кошелёк/кошельки разработчиков.\nсредства для Воркеров могут появляться из эмиссии новых токенов, из комиссий или прибыли от инвестиций в приложения.\n2. Заявка на получение средств после разработки проекта:\nПоля такиеже, как в предыдущем варианте.\nНо смартконтракта нет - в случае одобрения токены сразу переводятся аккаунту/аккаунтам.\n\n### Важно:\nВоркеры должны быть реализованы как на уровне Блокчейна, так и на уровне DApp.\nТо есть в API, позволяющем создавать децентрализованные приложения, должна быть прописана возможность создания всех условий для Воркеров внутри приложения.\nТогда, например, golos.id могло бы независимо от сети форка развиваться.\n\nПлюсом подхода является то, что задачи по развитию приложений и самого блокчейна не перемешиваются. Плюс, одобрять/не одобрять проекты должны чаще всего разные пользователи в этих двух случаях.\n\n## Что ещё нужно внедрить в форк:\nВставлю сюда то, что не требует написания большого числа букв:\n1. Обязательно надо сделать возможность отправки Custom_json транзакций, так как они позволяют создавать большую гибкость. Не знаю, есть ли они в EOS, но с ними будет лучше. Это позволит тем, кто не умеет делать смартконтракты, создавать транзакции с произвольными данными, не обучаясь дополнительно.\nНапример, с их помощью такой разработчик сможет добавить, например, статистическую информацию из базы данных для взаимодействия другими пользователями через API.\n2. Готовая реализация шифрования одной функцией в API GOLOS/EOS, чтобы не приходилось разработчикам вовне искать то, как зашифровать/расшифровать данные ключом пользователя (Этот вопрос в чате EOS задавал @captain);\n3. Распределение технических токенов в зависимости от СГ хорошая идея - приведёт к массовым закупкам GOLOS - стоит реализовать.\n4. Custom_binery. @on1x писал в чате Viz, что этот тип сейчас не используется на практике.\nДумаю стоит его перенести в форк, найти практическое применение (Добавление напрямую в блокчейн небольших файлов, например, логотипа проекта, хелперов для ускорения работы DApp за счёт наличия в готовом виде части функционала в бинарном виде и т.д.) и улучшить:\n    1. Добавить возможность добавления не только строк;\n    2. Разработать методы и примеры в API.\n\n## Пока всё:\nЕсть кое что ещё, но это в части 5.2, которую опубликую сегодня же.\nСлишком много букв вышло.\nБуду благодарен за отклик и ваше мнение по поводу написанного.";
echo nl2br($text); // Line 1<br />\nLine 2<br />\n;